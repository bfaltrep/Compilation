
import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;

terminal IdType TYPESIMPLE;
terminal STRING_LITERAL;
terminal CARACTERE;
terminal ENTIER;
terminal VIRGULE_FLOTTANTE;
terminal TRUE;
terminal FALSE;
terminal NULL;

terminal MOT;

//mots clefs
terminal LISTOF;
terminal STATIC;
terminal STRUCTURE;
terminal TYPE;

terminal CLASS;
terminal FUNCTION;
terminal PROCEDURE;

terminal BREAK;
terminal STOP;
terminal RETURN;

terminal FOREACH;
terminal IN;
terminal WHILE;
terminal REPEAT;
terminal IF;
terminal ELSE;

//Symboles du langage 
terminal POINT_VIRGULE;
terminal ACCOLADE_OUVRANTE;
terminal ACCOLADE_FERMANTE;
terminal VIRGULE;
terminal DEUX_POINT;
terminal EGAL;
terminal PARENTHESE_OUVRANTE;
terminal PARENTHESE_FERMANTE;
terminal CROCHET_OUVRANT;
terminal CROCHET_FERMANT;
terminal POINT;
terminal ESPERLUETTTE;
terminal EXCLAMATION;
terminal TILDE;
terminal CADRATIN;
terminal PLUS;
terminal ETOILE;
terminal BARRE_OBLIQUE;
terminal POURCENT;
terminal CHEVRON_INFERIEUR;
terminal CHEVRON_SUPERIEUR;
terminal CIRCONFLEXE;
terminal PIPE;
terminal INTERROGATION;

//Operateurs
terminal ELLIPSIS;
terminal ADD_ASSIGN;
terminal SUB_ASSIGN;
terminal MUL_ASSIGN;
terminal DIV_ASSIGN;
terminal MOD_ASSIGN;
terminal AND_ASSIGN;
terminal XOR_ASSIGN;
terminal OR_ASSIGN;
terminal RIGHT_OP;
terminal LEFT_OP;
terminal INC_OP;
terminal DEC_OP;
terminal PTR_OP;
terminal AND_OP;
terminal OR_OP;
terminal LE_OP;
terminal GE_OP;
terminal EQ_OP;
terminal NE_OP;

non terminal axiom;
non terminal declaration_class;
non terminal list_intraclasse;
non terminal intraclasse;

non terminal declaration_intraclasse;
non terminal definitions_intraclasse;

non terminal declaration_fonction;
non terminal declaration_procedure;
non terminal declaration_variable;
non terminal declaration_structure;
non terminal declaration_type;
non terminal declaration_tableau;

non terminal definition_constructeur;
non terminal definition_destructeur;
non terminal definition_fonction;
non terminal definition_procedure;
non terminal definition_structure;
non terminal affectation_variable;
non terminal affectation_tableau;

non terminal type;
non terminal type_complexe;

non terminal condiboucle;
non terminal list_declaration_argument;
non terminal list_declaration_variable;
non terminal declaration_argument;
non terminal bloc;

non terminal valeur;
non terminal list_valeur;

start with axiom;

condiboucle ::= FOREACH
 | IN
 | WHILE
 | REPEAT
 | IF
 | ELSE
 ;



axiom ::= declaration_class
       |
       ;

declaration_class ::= CLASS MOT ACCOLADE_OUVRANTE list_intraclasse ACCOLADE_FERMANTE {: System.out.println("finit."); :}
					| CLASS MOT ACCOLADE_OUVRANTE ACCOLADE_FERMANTE {: System.out.println("finit."); :}
					;

list_intraclasse ::= list_intraclasse intraclasse
            	   | intraclasse 
                   ;

intraclasse ::=  declaration_intraclasse
              | definitions_intraclasse
              ;

declaration_intraclasse ::= declaration_fonction
                        | declaration_procedure
                        | declaration_variable POINT_VIRGULE
                        | declaration_type POINT_VIRGULE
                        ;

declaration_fonction ::= FUNCTION MOT PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE DEUX_POINT type POINT_VIRGULE
                       ;

declaration_procedure ::= PROCEDURE MOT DEUX_POINT type POINT_VIRGULE
                        ;

list_declaration_variable ::= declaration_variable
                            | declaration_variable POINT_VIRGULE list_declaration_variable
                            |
                            ;

list_declaration_argument ::= declaration_argument
| declaration_argument VIRGULE list_declaration_argument
|
;

declaration_variable ::= MOT DEUX_POINT type 
                       ;

declaration_type ::= TYPE MOT EGAL STRUCTURE ACCOLADE_OUVRANTE list_declaration_variable ACCOLADE_FERMANTE
;


definitions_intraclasse ::= definition_constructeur
                                        | definition_destructeur
                                        | definition_fonction
                                        | definition_procedure
                                        | affectation_variable
                                        | definition_structure
                                        ;


definition_constructeur ::= MOT PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE ACCOLADE_OUVRANTE bloc ACCOLADE_FERMANTE 

    ;


definition_destructeur ::= TILDE MOT PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE ACCOLADE_OUVRANTE bloc ACCOLADE_FERMANTE
;

definition_fonction ::= FUNCTION MOT PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE DEUX_POINT type ACCOLADE_OUVRANTE bloc ACCOLADE_FERMANTE
;

definition_procedure ::= PROCEDURE MOT PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE ACCOLADE_OUVRANTE bloc ACCOLADE_FERMANTE
;

affectation_variable ::= MOT EGAL valeur POINT_VIRGULE
| MOT DEUX_POINT EGAL valeur POINT_VIRGULE
;

bloc ::= declaration_variable
    | affectation_variable
    | condiboucle
    | affectation_tableau
    | RETURN POINT_VIRGULE
    | RETURN MOT POINT_VIRGULE
    ;



declaration_tableau ::= CROCHET_OUVRANT list_valeur CROCHET_FERMANT POINT_VIRGULE
;

list_valeur ::= valeur VIRGULE list_valeur
| valeur 
| 
;

valeur ::= TRUE
| FALSE
| NULL
| MOT
| CARACTERE
| ENTIER
| VIRGULE_FLOTTANTE
| STRING_LITERAL
| declaration_tableau
| type_complexe
;


type ::= TYPESIMPLE
                | type_complexe
                ;

type_complexe ::= LISTOF type 
                                | CIRCONFLEXE type
                                | STRUCTURE ACCOLADE_OUVRANTE list_declaration_variable ACCOLADE_FERMANTE
                                | CLASS ACCOLADE_OUVRANTE list_intraclasse ACCOLADE_FERMANTE
                                ;
