
import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;

//valeurs des variables
terminal IdType TYPESIMPLE;
terminal STRING_LITERAL;
terminal CARACTERE;
terminal ENTIER;
terminal VIRGULE_FLOTTANTE;
terminal TRUE;
terminal FALSE;
terminal NULL;

//tout IDENTIFICATEUR créé par l'utilisateur
terminal IDENTIFICATEUR;

//IDENTIFICATEURs clefs
terminal LISTOF;
terminal STATIC;
terminal STRUCTURE;
terminal TYPE;

terminal CLASS;
terminal FUNCTION;
terminal PROCEDURE;

terminal BREAK;
terminal STOP;
terminal RETURN;

terminal FOREACH;
terminal IN;
terminal WHILE;
terminal REPEAT;
terminal IF;
terminal ELSE;

//Symboles du langage 
terminal POINT_VIRGULE;
terminal ACCOLADE_OUVRANTE;
terminal ACCOLADE_FERMANTE;
terminal VIRGULE;
terminal DEUX_POINT;
terminal EGAL;
terminal PARENTHESE_OUVRANTE;
terminal PARENTHESE_FERMANTE;
terminal CROCHET_OUVRANT;
terminal CROCHET_FERMANT;
terminal EXCLAMATION;
terminal TILDE;
terminal CADRATIN;
terminal PLUS;
terminal ETOILE;
terminal BARRE_OBLIQUE;
terminal POURCENT;
terminal CHEVRON_INFERIEUR;
terminal CHEVRON_SUPERIEUR;
terminal CIRCONFLEXE;


//Operateurs
terminal ADD_ASSIGN;
terminal SUB_ASSIGN;
terminal MUL_ASSIGN;
terminal DIV_ASSIGN;
terminal MOD_ASSIGN;
terminal INC_OP;
terminal DEC_OP;
terminal AND_OP;
terminal OR_OP;
terminal LE_OP;
terminal GE_OP;
terminal EQ_OP;
terminal NE_OP;

non terminal declaration_class;
non terminal list_intraclasse;
non terminal intraclasse;

non terminal declaration_intraclasse;
non terminal definition_intraclasse;

non terminal declaration_variable;
non terminal list_declaration_variable;
non terminal list_declaration_argument;

non terminal definition_structure;
non terminal affectation_variable;
non terminal affectation_tableau;

non terminal type;
non terminal type_complexe;
non terminal structure;

non terminal instruction;
non terminal list_instruction;

non terminal negation;
non terminal and;
non terminal or;

non terminal boolean_expression;
non terminal logical_expression;
non terminal compare_expression;
non terminal operation_binaire;
non terminal operation_binaire_assign;
non terminal operation_unaire;

non terminal valeur;
non terminal list_valeur;
non terminal integer_list;
non terminal tableau;

non terminal if;
non terminal else;

precedence left ADD_ASSIGN, MUL_ASSIGN, TYPESIMPLE, STRING_LITERAL, CARACTERE, ENTIER, VIRGULE_FLOTTANTE, TRUE, FALSE, NULL, IDENTIFICATEUR, LISTOF, STATIC, STRUCTURE, TYPE, CLASS, FUNCTION, PROCEDURE, BREAK, STOP, RETURN, FOREACH, IN, WHILE, REPEAT, IF, ELSE, POINT_VIRGULE, ACCOLADE_OUVRANTE, ACCOLADE_FERMANTE, VIRGULE, DEUX_POINT, EGAL, PARENTHESE_OUVRANTE, PARENTHESE_FERMANTE, CROCHET_OUVRANT, CROCHET_FERMANT, EXCLAMATION, TILDE, CADRATIN, PLUS, ETOILE, BARRE_OBLIQUE, POURCENT, CHEVRON_INFERIEUR, CHEVRON_SUPERIEUR, ADD_ASSIGN, SUB_ASSIGN, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, INC_OP, DEC_OP, AND_OP, OR_OP, LE_OP, GE_OP, EQ_OP, NE_OP;
precedence right CIRCONFLEXE;



start with declaration_class;

declaration_class ::= CLASS IDENTIFICATEUR ACCOLADE_OUVRANTE list_intraclasse ACCOLADE_FERMANTE {: System.out.println("compilation terminée."); :} 
    ;

list_intraclasse ::= list_intraclasse intraclasse
    | intraclasse 
    |
    ;

intraclasse ::= declaration_intraclasse
    | definition_intraclasse
    ;

declaration_intraclasse ::= STATIC FUNCTION IDENTIFICATEUR PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE DEUX_POINT type POINT_VIRGULE
    | FUNCTION IDENTIFICATEUR PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE DEUX_POINT type POINT_VIRGULE
    | STATIC PROCEDURE IDENTIFICATEUR PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE POINT_VIRGULE
    | PROCEDURE IDENTIFICATEUR PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE POINT_VIRGULE
    | list_declaration_variable
    | TYPE IDENTIFICATEUR EGAL structure POINT_VIRGULE
    ;

structure ::= STRUCTURE ACCOLADE_OUVRANTE list_declaration_variable ACCOLADE_FERMANTE 
    ;

declaration_variable ::= IDENTIFICATEUR DEUX_POINT type POINT_VIRGULE
    | STATIC IDENTIFICATEUR DEUX_POINT type POINT_VIRGULE
    ;

list_declaration_variable ::= list_declaration_variable declaration_variable  
    | declaration_variable
    ;

list_declaration_argument ::= IDENTIFICATEUR {: System.out.println("test ds arg"); :} DEUX_POINT type
    | list_declaration_argument VIRGULE {: System.out.println("test ds list_arg"); :} IDENTIFICATEUR DEUX_POINT type
    |
    ;

definition_intraclasse ::= TILDE IDENTIFICATEUR PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE ACCOLADE_OUVRANTE list_instruction ACCOLADE_FERMANTE
    | IDENTIFICATEUR PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE ACCOLADE_OUVRANTE list_instruction ACCOLADE_FERMANTE 
    | FUNCTION IDENTIFICATEUR PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE DEUX_POINT type ACCOLADE_OUVRANTE list_instruction ACCOLADE_FERMANTE
    | STATIC FUNCTION IDENTIFICATEUR PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE DEUX_POINT type ACCOLADE_OUVRANTE list_instruction ACCOLADE_FERMANTE
    | PROCEDURE IDENTIFICATEUR PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE ACCOLADE_OUVRANTE list_instruction ACCOLADE_FERMANTE
    | definition_structure
    ;

integer_list ::= integer_list VIRGULE ENTIER
    | 
    ;


tableau ::= CROCHET_OUVRANT integer_list CROCHET_FERMANT
    ;


and ::= valeur AND_OP valeur
    ;


or ::= valeur OR_OP valeur
    ;


negation ::= valeur EXCLAMATION valeur
    ;


logical_expression ::= and
    | or
    | negation
    ;

compare_expression ::= valeur CHEVRON_INFERIEUR valeur
    | valeur CHEVRON_SUPERIEUR valeur
    | valeur LE_OP valeur
    | valeur GE_OP valeur
    | valeur EQ_OP valeur
    | valeur NE_OP valeur
    ;


boolean_expression ::= logical_expression 
    | compare_expression
    ;
      
affectation_variable ::= IDENTIFICATEUR EGAL valeur POINT_VIRGULE
    | IDENTIFICATEUR EGAL operation_binaire POINT_VIRGULE
    | IDENTIFICATEUR EGAL operation_unaire POINT_VIRGULE
    | IDENTIFICATEUR EGAL IDENTIFICATEUR PARENTHESE_OUVRANTE list_valeur PARENTHESE_FERMANTE POINT_VIRGULE
    ;

if ::= IF boolean_expression ACCOLADE_OUVRANTE list_instruction ACCOLADE_FERMANTE
	;

else ::= ELSE ACCOLADE_OUVRANTE list_instruction ACCOLADE_FERMANTE
    | ELSE if 
    ;

list_instruction ::= instruction
    | list_instruction instruction
    |
    ;

instruction ::= declaration_variable
    | affectation_variable
    | affectation_tableau
    | IDENTIFICATEUR PARENTHESE_OUVRANTE list_valeur PARENTHESE_FERMANTE POINT_VIRGULE
    | valeur EGAL operation_binaire POINT_VIRGULE
    | valeur EGAL operation_unaire POINT_VIRGULE
    | operation_binaire_assign POINT_VIRGULE
    | operation_unaire POINT_VIRGULE
    | FOREACH IDENTIFICATEUR IN tableau ACCOLADE_OUVRANTE instruction ACCOLADE_FERMANTE
    | WHILE boolean_expression ACCOLADE_OUVRANTE instruction ACCOLADE_FERMANTE
    | REPEAT  ACCOLADE_OUVRANTE instruction ACCOLADE_FERMANTE WHILE boolean_expression
    | if
    | else
    | RETURN POINT_VIRGULE
    | RETURN IDENTIFICATEUR POINT_VIRGULE
    | STOP POINT_VIRGULE
    | BREAK POINT_VIRGULE
    ;

operation_binaire ::= valeur POURCENT valeur
    | valeur CADRATIN valeur
    | valeur PLUS valeur
    | valeur ETOILE valeur
    | valeur BARRE_OBLIQUE valeur
    ;

operation_binaire_assign ::= valeur ADD_ASSIGN valeur 
    | valeur SUB_ASSIGN valeur 
    | valeur MUL_ASSIGN valeur
    | valeur DIV_ASSIGN valeur 
    | valeur MOD_ASSIGN valeur
    ;
    
operation_unaire ::= valeur INC_OP
    | valeur DEC_OP
    | INC_OP valeur
    | DEC_OP valeur
    | PLUS valeur
    | CADRATIN valeur
    ;
    
list_valeur ::= list_valeur VIRGULE valeur
	| valeur 
	| 
	;

valeur ::= TRUE
    | FALSE
    | NULL
    | IDENTIFICATEUR
    | CARACTERE
    | ENTIER
    | VIRGULE_FLOTTANTE
    | STRING_LITERAL
    | tableau
    | operation_binaire
    | PARENTHESE_OUVRANTE valeur PARENTHESE_FERMANTE
    ;

type ::= TYPESIMPLE
    | type_complexe
    ;

type_complexe ::= LISTOF type
    | LISTOF IDENTIFICATEUR
    | CIRCONFLEXE type
    | structure
    | CLASS ACCOLADE_OUVRANTE list_intraclasse ACCOLADE_FERMANTE
    | error POINT_VIRGULE
    ;

