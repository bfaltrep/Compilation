
import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;

terminal IdType TYPESIMPLE;
terminal STRING_LITERAL;
terminal CARACTERE;
terminal VIRGULE_FLOTTANTE;

terminal MOT;

//mots clefs
terminal LISTOF;
terminal STATIC;
terminal STRUCTURE;

terminal CLASS;
terminal FUNCTION;
terminal PROCEDURE;

terminal BREAK;
terminal STOP;
terminal RETURN;

terminal FOREACH;
terminal IN;
terminal WHILE;
terminal REPEAT;
terminal IF;
terminal ELSE;

//Symboles du langage 
terminal POINT_VIRGULE;
terminal ACCOLADE_OUVRANTE;
terminal ACCOLADE_FERMANTE;
terminal VIRGULE;
terminal DEUX_POINT;
terminal EGAL;
terminal PARENTHESE_OUVRANTE;
terminal PARENTHESE_FERMANTE;
terminal CROCHET_OUVRANT;
terminal CROCHET_FERMANT;
terminal POINT;
terminal ESPERLUETTTE;
terminal EXCLAMATION;
terminal TILDE;
terminal CADRATIN;
terminal PLUS;
terminal ETOILE;
terminal BARRE_OBLIQUE;
terminal POURCENT;
terminal CHEVRON_INFERIEUR;
terminal CHEVRON_SUPERIEUR;
terminal CIRCONFLEXE;
terminal PIPE;
terminal INTERROGATION;

//Operateurs
terminal ELLIPSIS,;
terminal ADD_ASSIGN;
terminal SUB_ASSIGN;
terminal MUL_ASSIGN;
terminal DIV_ASSIGN;
terminal MOD_ASSIGN;
terminal AND_ASSIGN;
terminal XOR_ASSIGN;
terminal OR_ASSIGN;
terminal RIGHT_OP;
terminal LEFT_OP;
terminal INC_OP;
terminal DEC_OP;
terminal PTR_OP;
terminal AND_OP;
terminal OR_OP;
terminal LE_OP;
terminal GE_OP;
terminal EQ_OP;
terminal NE_OP;

non terminal axiom;
non terminal declaration_class;
non terminal list_instance;
non terminal instance;

non terminal declaration_instance;
non terminal definition_instance;

non terminal declaration_fonction;
non terminal declaration_procedure;
non terminal declaration_variable;
non terminal declaration_structure;

non terminal definition_constructeur;
non terminal definition_destructeur;
non terminal definition_fonction;
non terminal definition_procedure;
non terminal definition_variable;
non terminal definition_structure;

non terminal type;
non terminal type_complexe;

start with axiom;

axiom ::= declaration_class
		|
		;

declaration_class ::= CLASS MOT ACCOLADE_OUVRANTE list_instance ACCOLADE_FERMANTE

list_instance ::= instance
				| instance list_instance
				|
				;

instance ::=  declaration_instance
			| definition_instance
			;

declaration_instance ::= declaration_fonction
						| declaration_procedure
						| declaration_variable
						| declaration_structure
						;

declaration_fonction ::= FUNCTION MOT PARENTHESE_OUVRANTE list_declaration_variable PARENTHESE_FERMANTE DEUX_POINT type POINT_VIRGULE
						;

declaration_procedure ::= PROCEDURE MOT DEUX_POINT type POINT_VIRGULE
						;

list_declaration_variable ::= declaration_variable
							| declaration_variable VIRGULE list_declaration_variable
							|
							;

declaration_variable ::= MOT DEUX_POINT type POINT_VIRGULE
						| MOT DEUX_POINT LISTOF STRUCTURE ACCOLADE_OUVRANTE list_declaration_variable ACCOLADE_FERMANTE POINT_VIRGULE
						;

declaration_structure ::= 


definition_instance ::= definition_constructeur
					| definition_destructeur
					| definition_fonction
					| definition_procedure
					| definition_variable
					| definition_structure
					;


definition_constructeur ::= 

definition_destructeur ::=

definition_fonction ::=

definition_procedure ::= PROCEDURE mot  

definition_variable ::=

definition_structure ::=

type ::= TYPESIMPLE
		| type_complexe
		;

type_complexe ::= LISTOF type 
				| CIRCONFLEXE type
				| STRUCTURE ACCOLADE_OUVRANTE list_declaration_variable ACCOLADE_FERMANTE
				| CLASS ACCOLADE_OUVRANTE list_instance ACCOLADE_FERMANTE
				;



axiom ::=   TYPESIMPLE:t1 
			{: System.out.println("type "+t1); :} 
		|	PROCEDURE 
			{: System.out.println("procedure"); :}
			;