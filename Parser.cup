
import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;
import Compilation.*;
import javax.swing.tree.DefaultMutableTreeNode;

import java.lang.*;


action code {:
    public Environment environmentGlobal;
    public TypeAutorise type_autorise;
    //public int index;

    private DefaultMutableTreeNode declaration_variable(String nom, DefaultMutableTreeNode type, boolean isStatic)
    {
        DefaultMutableTreeNode node = new DefaultMutableTreeNode(); 
        node.setUserObject(new Variable(nom,type,isStatic)); 
        return node;
    }

    public DefaultMutableTreeNode getType(DefaultMutableTreeNode fils, String type) throws Exception
    {
        if(type_autorise.isAutorised((Integer) ((DefaultMutableTreeNode) fils).getUserObject()))
        {
            DefaultMutableTreeNode node = new DefaultMutableTreeNode(); 
            node.add(fils);
            node.setUserObject(type_autorise.getId(type));
            return node;
        }
        else
        {
            throw new Exception("Parser Exception : type "+fils.getUserObject()+" unexpected.");
        }
    }
:}

parser code {:

    public void syntax_error(Symbol cur_token){
        //nous avons pris ligne +1 pour que ca corresponde a l'affichage des éditeurs de texte qui commencent souvent à la ligne 1 et non 0.
        System.out.println("Erreur rencontrée pour le token "+cur_token.sym+" rencontré à la ligne "+(cur_token.left+1)+" et colonne "+cur_token.right+".");
    }

:}

//valeurs des variables
terminal IdType TYPESIMPLE;
terminal String STRING_LITERAL;
terminal CARACTERE;
terminal ENTIER;
terminal VIRGULE_FLOTTANTE;
terminal TRUE;
terminal FALSE;
terminal NULL;

//tout IDENTIFICATEUR créé par l'utilisateur
terminal String IDENTIFICATEUR;

//IDENTIFICATEURs clefs
terminal LISTOF;
terminal STATIC;
terminal STRUCTURE;
terminal TYPE;

terminal CLASS;
terminal FUNCTION;
terminal PROCEDURE;

terminal BREAK;
terminal STOP;
terminal RETURN;

terminal FOREACH;
terminal IN;
terminal WHILE;
terminal REPEAT;
terminal IF;
terminal ELSE;

//Symboles du langage 
terminal POINT_VIRGULE;
terminal ACCOLADE_OUVRANTE;
terminal ACCOLADE_FERMANTE;
terminal VIRGULE;
terminal DEUX_POINT;
terminal EGAL;
terminal PARENTHESE_OUVRANTE;
terminal PARENTHESE_FERMANTE;
terminal CROCHET_OUVRANT;
terminal CROCHET_FERMANT;
terminal EXCLAMATION;
terminal TILDE;
terminal CADRATIN;
terminal PLUS;
terminal ETOILE;
terminal BARRE_OBLIQUE;
terminal POURCENT;
terminal CHEVRON_INFERIEUR;
terminal CHEVRON_SUPERIEUR;
terminal CIRCONFLEXE;
terminal POINT;

//Operateurs
terminal ADD_ASSIGN;
terminal SUB_ASSIGN;
terminal MUL_ASSIGN;
terminal DIV_ASSIGN;
terminal MOD_ASSIGN;
terminal INC_OP;
terminal DEC_OP;
terminal AND_OP;
terminal OR_OP;
terminal LE_OP;
terminal GE_OP;
terminal EQ_OP;
terminal NE_OP;

non terminal declaration_class;
non terminal list_intraclasse;
non terminal intraclasse;
non terminal declaration_classe;

non terminal declaration_intraclasse;
non terminal definition_intraclasse;

non terminal DefaultMutableTreeNode declaration_variable;
non terminal DefaultMutableTreeNode list_declaration_variable;
non terminal list_declaration_argument;
non terminal list_declaration_argument_in;

non terminal affectation_variable;
non terminal DefaultMutableTreeNode type;
non terminal DefaultMutableTreeNode type_complexe;
non terminal DefaultMutableTreeNode structure;

non terminal instruction;
non terminal list_instruction;

non terminal negation;
non terminal and;
non terminal or;
non terminal boolean_expression;
non terminal logical_expression;
non terminal compare_expression;
non terminal operation_binaire;
non terminal operation_binaire_assign;
non terminal operation_unaire;

non terminal indice;
non terminal list_valeur;
non terminal list_valeur_in;
non terminal tableau;
non terminal valeur;
non terminal valeur_simple;
non terminal valeur_boolean;
non terminal valeur_tableau_imbrique;

non terminal if;
non terminal else;

//non terminaux utiles à la création de l'arbre des environements
non terminal accolade_o_environment;
non terminal accolade_f_environment;

precedence left ADD_ASSIGN, MUL_ASSIGN, CHEVRON_INFERIEUR, CHEVRON_SUPERIEUR, ADD_ASSIGN, SUB_ASSIGN, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, INC_OP, DEC_OP, AND_OP, OR_OP, LE_OP, GE_OP, EQ_OP, NE_OP;
precedence left TYPESIMPLE, STRING_LITERAL, CARACTERE, ENTIER, VIRGULE_FLOTTANTE, TRUE, FALSE, NULL, LISTOF, IDENTIFICATEUR;
precedence left POINT_VIRGULE, ACCOLADE_FERMANTE, PARENTHESE_FERMANTE, CROCHET_FERMANT, EXCLAMATION, TILDE;
precedence left BREAK, STOP, RETURN, CADRATIN, PLUS, ETOILE, BARRE_OBLIQUE, POURCENT;

precedence right CIRCONFLEXE, PARENTHESE_OUVRANTE, CROCHET_OUVRANT, ACCOLADE_OUVRANTE;
precedence right DEUX_POINT, EGAL, VIRGULE;
precedence right STATIC, STRUCTURE, TYPE, CLASS, FUNCTION, PROCEDURE, FOREACH, IN, WHILE, REPEAT, IF, ELSE;


start with declaration_class;

declaration_class ::= CLASS IDENTIFICATEUR ACCOLADE_OUVRANTE {: /*creation du premier environement*/ /*index = 0;*/ type_autorise = new TypeAutorise(); environmentGlobal= new Environment(); :} list_intraclasse ACCOLADE_FERMANTE {: 
                        /*environmentGlobal.toDot("res_final");  */
                        System.out.println("Compilation terminée."); 
                        :}
    |
    ;

list_intraclasse ::= list_intraclasse intraclasse 
    | intraclasse 
    | 
    | error intraclasse 
    ;

intraclasse ::= definition_intraclasse 
    | declaration_intraclasse
    | declaration_classe 
    ;

declaration_classe ::= CLASS IDENTIFICATEUR ACCOLADE_OUVRANTE list_intraclasse ACCOLADE_FERMANTE
    ;

declaration_intraclasse ::= STATIC FUNCTION IDENTIFICATEUR PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE DEUX_POINT type POINT_VIRGULE
    | FUNCTION IDENTIFICATEUR PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE DEUX_POINT type POINT_VIRGULE
    | STATIC PROCEDURE IDENTIFICATEUR PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE POINT_VIRGULE
    | PROCEDURE IDENTIFICATEUR PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE POINT_VIRGULE 
    | list_declaration_variable:ldv {:             
                        if(ldv.isLeaf()){
                            /*((Variable) ldv.getUserObject()).toDot("var_"+((Variable) ldv.getUserObject()).getName());*/
                            environmentGlobal.add(((Variable)ldv.getUserObject()).getName(),((Variable) ldv.getUserObject()));
                        }else{
                        
                            //sous forme de structure. On doit récupérer le contenu et abandonner la racine "structure".
                            for(int i =0 ; i < ldv.getChildCount() ; i++){
                                /*((Variable) ((DefaultMutableTreeNode) ldv.getChildAt(i)).getUserObject()).toDot("var_"+((Variable) ((DefaultMutableTreeNode) ldv.getChildAt(i)).getUserObject()).getName());*/
                                environmentGlobal.add(((Variable)((DefaultMutableTreeNode) ldv.getChildAt(i)).getUserObject()).getName(), ((DefaultMutableTreeNode) ldv.getChildAt(i)).getUserObject());
                            }
                        } 
                         :}
    | TYPE IDENTIFICATEUR:id EGAL structure:st POINT_VIRGULE {: type_autorise.add(id, true, st); :}
    ;

structure ::= STRUCTURE ACCOLADE_OUVRANTE list_declaration_variable:ldv ACCOLADE_FERMANTE {:
                        //une structure vide. Inutile pour le langage mais acceptable par la grammaire.
                        if(ldv == null){
                            DefaultMutableTreeNode node = new DefaultMutableTreeNode(); 
                            node.setUserObject(type_autorise.getId("structure")); 
                            RESULT = node;
                        }
                        if(ldv.isLeaf()){
                            DefaultMutableTreeNode node = new DefaultMutableTreeNode(); 
                            node.add(ldv); 
                            node.setUserObject(type_autorise.getId("structure")); 
                            RESULT = node; 
                        }else{ 
                            RESULT = ldv;
                        }
                        :}
    ;

declaration_variable ::= IDENTIFICATEUR:nom DEUX_POINT type:t POINT_VIRGULE {:  
                        RESULT = declaration_variable(nom,t,false); 
                        :}
    | STATIC IDENTIFICATEUR:nom DEUX_POINT type:t POINT_VIRGULE  {:  
                        
                        RESULT = declaration_variable(nom,t,true); 
                        :}
    ;

list_declaration_variable ::= list_declaration_variable:ldv declaration_variable:dv {:  
                        if(!ldv.isLeaf()){
                            ldv.add(dv);
                            RESULT = ldv;
                        }
                        else{
                            DefaultMutableTreeNode node = new DefaultMutableTreeNode(); 
                            node.add(ldv); 
                            node.add(dv); 
                            node.setUserObject(type_autorise.getId("structure")); 
                            RESULT = node; 
                        }
                        :}
    | declaration_variable:dv {: RESULT = dv; :}
    ;

list_declaration_argument ::= list_declaration_argument_in
    |
    ;

list_declaration_argument_in ::= IDENTIFICATEUR DEUX_POINT type
    | list_declaration_argument_in VIRGULE IDENTIFICATEUR DEUX_POINT type
    ;

definition_intraclasse ::= TILDE IDENTIFICATEUR PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE accolade_o_environment list_instruction accolade_f_environment
    | IDENTIFICATEUR PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE accolade_o_environment list_instruction accolade_f_environment
    | FUNCTION IDENTIFICATEUR PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE DEUX_POINT type accolade_o_environment list_instruction accolade_f_environment
    | STATIC FUNCTION IDENTIFICATEUR PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE DEUX_POINT type accolade_o_environment list_instruction accolade_f_environment
    | PROCEDURE IDENTIFICATEUR PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE accolade_o_environment list_instruction accolade_f_environment
    | STATIC PROCEDURE IDENTIFICATEUR PARENTHESE_OUVRANTE list_declaration_argument PARENTHESE_FERMANTE accolade_o_environment list_instruction accolade_f_environment
    ;

and ::= valeur AND_OP valeur
    ;


or ::= valeur OR_OP valeur
    ;

negation ::= valeur EXCLAMATION valeur
    ;

logical_expression ::= and
    | or
    | negation
    ;

compare_expression ::= valeur CHEVRON_INFERIEUR valeur
    | valeur CHEVRON_SUPERIEUR valeur
    | valeur LE_OP valeur
    | valeur GE_OP valeur
    | valeur EQ_OP valeur
    | valeur NE_OP valeur
    ;

boolean_expression ::= logical_expression 
    | compare_expression
    | error PARENTHESE_FERMANTE
    ;
      
affectation_variable ::= IDENTIFICATEUR EGAL valeur POINT_VIRGULE
    | IDENTIFICATEUR EGAL operation_binaire POINT_VIRGULE
    | IDENTIFICATEUR EGAL operation_unaire POINT_VIRGULE
    | IDENTIFICATEUR EGAL IDENTIFICATEUR PARENTHESE_OUVRANTE list_valeur PARENTHESE_FERMANTE POINT_VIRGULE
    | IDENTIFICATEUR CROCHET_OUVRANT indice CROCHET_FERMANT EGAL valeur POINT_VIRGULE 
    | CIRCONFLEXE IDENTIFICATEUR EGAL valeur POINT_VIRGULE
    ;

if ::= IF PARENTHESE_OUVRANTE boolean_expression PARENTHESE_FERMANTE accolade_o_environment list_instruction accolade_f_environment
	;

else ::= ELSE accolade_o_environment list_instruction accolade_f_environment
    | ELSE if 
    ;

list_instruction ::= instruction
    | list_instruction instruction
    |
    | error instruction
    | error ACCOLADE_FERMANTE
    ;

instruction ::= declaration_variable:dv {:
                        /*((Variable) dv.getUserObject()).toDot("var_"+((Variable)dv.getUserObject()).getName());*/
                        environmentGlobal.add(((Variable)dv.getUserObject()).getName(),(Variable) dv.getUserObject());
                        :}
    | affectation_variable
    | IDENTIFICATEUR PARENTHESE_OUVRANTE list_valeur PARENTHESE_FERMANTE POINT_VIRGULE
    | operation_binaire_assign POINT_VIRGULE
    | operation_unaire POINT_VIRGULE
    | FOREACH IDENTIFICATEUR IN IDENTIFICATEUR accolade_o_environment list_instruction accolade_f_environment
    | WHILE PARENTHESE_OUVRANTE boolean_expression PARENTHESE_FERMANTE accolade_o_environment list_instruction accolade_f_environment
    | REPEAT accolade_o_environment list_instruction accolade_f_environment WHILE PARENTHESE_OUVRANTE boolean_expression PARENTHESE_FERMANTE
    | if
    | else
    | RETURN POINT_VIRGULE
    | RETURN IDENTIFICATEUR POINT_VIRGULE
    | STOP POINT_VIRGULE
    | BREAK POINT_VIRGULE
    ;

operation_binaire ::= valeur POURCENT valeur
    | valeur CADRATIN valeur
    | valeur PLUS valeur
    | valeur ETOILE valeur
    | valeur BARRE_OBLIQUE valeur
    | error POINT_VIRGULE
    | error PARENTHESE_FERMANTE
    ;

operation_binaire_assign ::= valeur ADD_ASSIGN valeur 
    | valeur SUB_ASSIGN valeur 
    | valeur MUL_ASSIGN valeur
    | valeur DIV_ASSIGN valeur 
    | valeur MOD_ASSIGN valeur
    ;
    
operation_unaire ::= valeur INC_OP
    | valeur DEC_OP
    | INC_OP valeur
    | DEC_OP valeur
    | PLUS valeur
    | CADRATIN valeur
    ;

tableau ::= CROCHET_OUVRANT list_valeur CROCHET_FERMANT
    ;

indice ::= ENTIER
    | IDENTIFICATEUR
    ;

list_valeur ::= list_valeur_in
    |
    | error CROCHET_FERMANT
    ;
    
list_valeur_in ::= list_valeur_in VIRGULE valeur
	| valeur
    | error valeur
	;

valeur ::= valeur_boolean
    | IDENTIFICATEUR valeur_tableau_imbrique
    | IDENTIFICATEUR
    | valeur_simple
    | PARENTHESE_OUVRANTE
    | tableau 
    | IDENTIFICATEUR POINT IDENTIFICATEUR
    ;

valeur_simple ::= CARACTERE
    | ENTIER
    | VIRGULE_FLOTTANTE
    | STRING_LITERAL
    ;

valeur_boolean ::= TRUE
    | FALSE
    | NULL
    ;  

valeur_tableau_imbrique ::= CROCHET_OUVRANT indice CROCHET_FERMANT
    | valeur_tableau_imbrique CROCHET_OUVRANT indice CROCHET_FERMANT
    ;

type ::= TYPESIMPLE:t {: RESULT = new DefaultMutableTreeNode(t.getValue());; :}
    | type_complexe:t {: if(t instanceof DefaultMutableTreeNode){ RESULT = t; }
                        else{ throw new Exception("Complex type unexpected : "+t); } :}
    ;

type_complexe ::= LISTOF type:t {: RESULT = getType(t,"listof"); :}
    | LISTOF IDENTIFICATEUR:t {:
                        if(type_autorise.getId(t) == -1){ throw new Exception("Type in 'list of' unexpected : "+t); }
                        else{ RESULT = getType(new DefaultMutableTreeNode(type_autorise.getId(t)),"listof"); } :}
    | CIRCONFLEXE type:t {: RESULT = getType(t,"pointeur"); :}
    | structure:t {: RESULT = t; :}
    | error POINT_VIRGULE
    | error ACCOLADE_OUVRANTE
    ;

accolade_o_environment ::= ACCOLADE_OUVRANTE {: environmentGlobal = new Environment(environmentGlobal); /*index++;*/ :}
    ;

accolade_f_environment ::= ACCOLADE_FERMANTE {: /*environmentGlobal.toDot("res"+index);*/ environmentGlobal = environmentGlobal.getPrev(); :}
    ;


