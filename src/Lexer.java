/* The following code was generated by JFlex 1.4.3 on 15/10/15 18:21 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 15/10/15 18:21 from the specification file
 * <tt>/autofs/netapp/account/cremi/bfaltrep/M1/Compilation/Projet1/Lexer.jflex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\24\1\10\1\0\1\24\23\0\1\36\1\55\1\27\2\0"+
    "\1\61\1\65\1\2\1\51\1\52\1\26\1\60\1\46\1\57\1\23"+
    "\1\25\1\20\11\1\1\47\1\43\1\62\1\50\1\63\2\0\6\22"+
    "\24\16\1\53\1\0\1\54\1\64\1\17\1\0\1\14\1\35\1\15"+
    "\1\40\1\3\1\32\1\30\1\31\1\6\1\16\1\41\1\33\1\16"+
    "\1\4\1\34\1\11\1\16\1\7\1\13\1\5\1\12\1\16\1\42"+
    "\1\21\1\37\1\16\1\44\1\66\1\45\1\56\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\5\3\1\4\4\3\1\2"+
    "\1\5\1\6\1\7\1\1\4\3\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\2\1"+
    "\2\0\5\3\1\32\1\33\5\3\3\0\1\34\1\35"+
    "\1\0\1\36\10\3\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\2\0\16\3"+
    "\2\0\10\3\3\0\1\3\1\52\1\53\1\54\1\55"+
    "\7\3\1\56\2\3\1\57\10\3\2\0\11\3\1\60"+
    "\1\3\1\61\1\62\1\3\1\0\1\63\1\3\1\64"+
    "\1\0\2\3\1\65\1\66\1\3\1\67\1\3\1\70"+
    "\3\3\1\0\1\3\2\0\1\71\4\3\1\72\1\73"+
    "\1\74\2\0\3\3\1\75\2\0\1\76\1\77\1\100"+
    "\16\0\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\67\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\67"+
    "\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\67"+
    "\0\67\0\67\0\67\0\67\0\u0483\0\67\0\67\0\67"+
    "\0\67\0\u04ba\0\67\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd"+
    "\0\67\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e"+
    "\0\u0785\0\u07bc\0\u07f3\0\u0226\0\u082a\0\u0861\0\u0898\0\u08cf"+
    "\0\u0906\0\u093d\0\u0974\0\u09ab\0\67\0\67\0\u0370\0\67"+
    "\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63"+
    "\0\67\0\67\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\67\0\67\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76"+
    "\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e"+
    "\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6"+
    "\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e"+
    "\0\u11d5\0\u0226\0\u0226\0\u0226\0\u0226\0\u120c\0\u1243\0\u127a"+
    "\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u0226\0\u138d\0\u13c4\0\67"+
    "\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c"+
    "\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734"+
    "\0\u176b\0\u17a2\0\u17d9\0\u0226\0\u1810\0\u0226\0\u0226\0\u1847"+
    "\0\u187e\0\u0226\0\u18b5\0\u0226\0\u18ec\0\u1923\0\u195a\0\u0226"+
    "\0\u0226\0\u1991\0\u0226\0\u19c8\0\u0226\0\u19ff\0\u1a36\0\u1a6d"+
    "\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u0226\0\u1b80\0\u1bb7\0\u1bee"+
    "\0\u1c25\0\u0226\0\67\0\u0226\0\u1c5c\0\u1c93\0\u1cca\0\u1d01"+
    "\0\u1d38\0\u0226\0\u1d6f\0\u1da6\0\u0226\0\u0226\0\u0226\0\u1ddd"+
    "\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95"+
    "\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\14\1\16\1\14\1\2"+
    "\1\17\2\14\1\20\1\12\1\21\1\22\1\23\2\14"+
    "\1\24\1\25\1\14\1\26\1\12\3\14\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\70\0\1\3\16\0\1\3\46\0"+
    "\2\54\1\55\5\54\1\0\56\54\1\0\1\14\1\0"+
    "\1\14\1\56\3\14\1\0\12\14\5\0\3\14\1\57"+
    "\2\14\1\0\4\14\14\0\1\14\10\0\1\14\1\0"+
    "\5\14\1\0\1\14\1\60\10\14\5\0\6\14\1\0"+
    "\4\14\14\0\1\14\10\0\1\14\1\0\4\14\1\61"+
    "\1\0\12\14\5\0\6\14\1\0\1\62\3\14\14\0"+
    "\1\14\10\0\1\14\1\0\1\14\1\63\3\14\1\0"+
    "\12\14\5\0\2\14\1\64\3\14\1\0\4\14\14\0"+
    "\1\14\10\0\1\14\1\0\1\65\4\14\1\0\12\14"+
    "\5\0\6\14\1\0\4\14\14\0\1\14\10\0\1\14"+
    "\1\0\4\14\1\66\1\0\12\14\5\0\6\14\1\0"+
    "\4\14\14\0\1\14\10\0\1\14\1\0\5\14\1\0"+
    "\12\14\5\0\6\14\1\0\4\14\14\0\1\14\10\0"+
    "\1\14\1\0\2\14\1\67\2\14\1\0\12\14\5\0"+
    "\6\14\1\0\4\14\14\0\1\14\10\0\1\14\1\0"+
    "\5\14\1\0\12\14\5\0\1\14\1\70\1\14\1\71"+
    "\2\14\1\0\4\14\14\0\1\14\10\0\1\3\16\0"+
    "\1\3\1\72\72\0\1\73\1\74\21\0\1\75\66\0"+
    "\1\76\16\0\27\77\1\100\37\77\1\0\1\14\1\0"+
    "\5\14\1\0\1\14\1\101\1\14\1\102\6\14\5\0"+
    "\3\14\1\103\1\104\1\14\1\0\4\14\14\0\1\14"+
    "\10\0\1\14\1\0\3\14\1\105\1\14\1\0\12\14"+
    "\5\0\6\14\1\0\4\14\14\0\1\14\10\0\1\14"+
    "\1\0\4\14\1\106\1\0\12\14\5\0\4\14\1\107"+
    "\1\14\1\0\4\14\14\0\1\14\10\0\1\14\1\0"+
    "\5\14\1\0\12\14\5\0\1\14\1\110\4\14\1\0"+
    "\4\14\14\0\1\14\57\0\1\111\66\0\1\112\66\0"+
    "\1\113\6\0\1\114\57\0\1\115\7\0\1\116\56\0"+
    "\1\117\66\0\1\120\66\0\1\121\103\0\1\122\67\0"+
    "\1\123\2\0\1\124\66\0\1\125\65\0\1\14\1\0"+
    "\2\14\1\126\2\14\1\0\12\14\5\0\6\14\1\0"+
    "\4\14\14\0\1\14\10\0\1\14\1\0\5\14\1\0"+
    "\2\14\1\127\7\14\5\0\6\14\1\0\4\14\14\0"+
    "\1\14\10\0\1\14\1\0\5\14\1\0\12\14\5\0"+
    "\3\14\1\130\2\14\1\0\4\14\14\0\1\14\10\0"+
    "\1\14\1\0\5\14\1\0\1\14\1\131\10\14\5\0"+
    "\6\14\1\0\4\14\14\0\1\14\10\0\1\14\1\0"+
    "\5\14\1\0\1\132\11\14\5\0\6\14\1\0\4\14"+
    "\14\0\1\14\10\0\1\14\1\0\2\14\1\133\2\14"+
    "\1\0\12\14\5\0\6\14\1\0\4\14\14\0\1\14"+
    "\10\0\1\14\1\0\2\14\1\134\2\14\1\0\1\135"+
    "\11\14\5\0\6\14\1\0\4\14\14\0\1\14\10\0"+
    "\1\14\1\0\5\14\1\0\12\14\5\0\4\14\1\136"+
    "\1\14\1\0\4\14\14\0\1\14\10\0\1\14\1\0"+
    "\4\14\1\137\1\0\3\14\1\140\6\14\5\0\4\14"+
    "\1\141\1\14\1\0\4\14\14\0\1\14\10\0\1\14"+
    "\1\0\5\14\1\0\3\14\1\142\6\14\5\0\6\14"+
    "\1\0\4\14\14\0\1\14\10\0\1\14\1\0\5\14"+
    "\1\0\3\14\1\143\6\14\5\0\6\14\1\0\4\14"+
    "\14\0\1\14\10\0\1\144\16\0\1\144\46\0\10\73"+
    "\1\12\56\73\26\74\1\145\40\74\1\0\1\14\1\0"+
    "\1\14\1\146\3\14\1\0\12\14\5\0\6\14\1\0"+
    "\4\14\14\0\1\14\10\0\1\14\1\0\5\14\1\0"+
    "\12\14\5\0\3\14\1\147\2\14\1\0\4\14\14\0"+
    "\1\14\10\0\1\14\1\0\5\14\1\0\12\14\5\0"+
    "\4\14\1\150\1\14\1\0\4\14\14\0\1\14\10\0"+
    "\1\14\1\0\4\14\1\151\1\0\12\14\5\0\6\14"+
    "\1\0\4\14\14\0\1\14\10\0\1\14\1\0\5\14"+
    "\1\0\2\14\1\152\7\14\5\0\6\14\1\0\4\14"+
    "\14\0\1\14\10\0\1\14\1\0\1\153\4\14\1\0"+
    "\12\14\5\0\6\14\1\0\4\14\14\0\1\14\10\0"+
    "\1\14\1\0\5\14\1\0\12\14\5\0\4\14\1\154"+
    "\1\14\1\0\4\14\14\0\1\14\10\0\1\14\1\0"+
    "\3\14\1\155\1\14\1\0\12\14\5\0\6\14\1\0"+
    "\4\14\14\0\1\14\12\0\1\156\65\0\1\157\1\156"+
    "\17\0\1\160\44\0\1\14\1\0\3\14\1\161\1\14"+
    "\1\0\12\14\5\0\6\14\1\0\4\14\14\0\1\14"+
    "\10\0\1\14\1\0\1\162\4\14\1\0\12\14\5\0"+
    "\6\14\1\0\4\14\14\0\1\14\10\0\1\14\1\0"+
    "\5\14\1\0\12\14\5\0\3\14\1\163\2\14\1\0"+
    "\4\14\14\0\1\14\10\0\1\14\1\0\1\164\4\14"+
    "\1\0\12\14\5\0\6\14\1\0\4\14\14\0\1\14"+
    "\10\0\1\14\1\0\1\165\4\14\1\0\12\14\5\0"+
    "\6\14\1\0\4\14\14\0\1\14\10\0\1\14\1\0"+
    "\1\166\4\14\1\0\12\14\5\0\6\14\1\0\4\14"+
    "\14\0\1\14\10\0\1\14\1\0\5\14\1\0\1\14"+
    "\1\167\10\14\5\0\6\14\1\0\4\14\14\0\1\14"+
    "\10\0\1\14\1\0\1\170\4\14\1\0\12\14\5\0"+
    "\6\14\1\0\4\14\14\0\1\14\10\0\1\14\1\0"+
    "\5\14\1\0\4\14\1\171\5\14\5\0\6\14\1\0"+
    "\4\14\14\0\1\14\10\0\1\14\1\0\3\14\1\172"+
    "\1\14\1\0\1\14\1\173\10\14\5\0\6\14\1\0"+
    "\4\14\14\0\1\14\10\0\1\14\1\0\2\14\1\174"+
    "\2\14\1\0\12\14\5\0\6\14\1\0\4\14\14\0"+
    "\1\14\10\0\1\14\1\0\5\14\1\0\1\175\11\14"+
    "\5\0\6\14\1\0\4\14\14\0\1\14\10\0\1\14"+
    "\1\0\4\14\1\176\1\0\12\14\5\0\6\14\1\0"+
    "\4\14\14\0\1\14\10\0\1\14\1\0\5\14\1\0"+
    "\2\14\1\177\7\14\5\0\6\14\1\0\4\14\14\0"+
    "\1\14\10\0\1\200\1\0\1\200\10\0\2\200\2\0"+
    "\1\200\1\0\1\200\7\0\1\200\2\0\1\200\2\0"+
    "\1\200\26\0\25\74\1\12\1\145\40\74\1\0\1\14"+
    "\1\0\5\14\1\0\4\14\1\201\5\14\5\0\6\14"+
    "\1\0\4\14\14\0\1\14\10\0\1\14\1\0\5\14"+
    "\1\0\2\14\1\202\7\14\5\0\6\14\1\0\4\14"+
    "\14\0\1\14\10\0\1\14\1\0\5\14\1\0\3\14"+
    "\1\203\6\14\5\0\6\14\1\0\4\14\14\0\1\14"+
    "\10\0\1\14\1\0\1\204\4\14\1\0\12\14\5\0"+
    "\6\14\1\0\4\14\14\0\1\14\10\0\1\14\1\0"+
    "\2\14\1\205\2\14\1\0\12\14\5\0\6\14\1\0"+
    "\4\14\14\0\1\14\10\0\1\14\1\0\5\14\1\0"+
    "\3\14\1\206\6\14\5\0\6\14\1\0\4\14\14\0"+
    "\1\14\10\0\1\14\1\0\5\14\1\0\12\14\5\0"+
    "\3\14\1\207\2\14\1\0\4\14\14\0\1\14\10\0"+
    "\1\14\1\0\5\14\1\0\12\14\5\0\3\14\1\210"+
    "\2\14\1\0\4\14\14\0\1\14\13\0\1\211\64\0"+
    "\1\212\66\0\1\157\65\0\1\14\1\0\1\213\4\14"+
    "\1\0\12\14\5\0\6\14\1\0\4\14\14\0\1\14"+
    "\10\0\1\14\1\0\5\14\1\0\12\14\5\0\1\214"+
    "\5\14\1\0\4\14\14\0\1\14\10\0\1\14\1\0"+
    "\4\14\1\215\1\0\12\14\5\0\6\14\1\0\4\14"+
    "\14\0\1\14\10\0\1\14\1\0\5\14\1\0\3\14"+
    "\1\216\6\14\5\0\6\14\1\0\4\14\14\0\1\14"+
    "\10\0\1\14\1\0\1\217\4\14\1\0\12\14\5\0"+
    "\6\14\1\0\4\14\14\0\1\14\10\0\1\14\1\0"+
    "\1\14\1\220\3\14\1\0\12\14\5\0\6\14\1\0"+
    "\4\14\14\0\1\14\10\0\1\14\1\0\5\14\1\0"+
    "\4\14\1\221\5\14\5\0\6\14\1\0\4\14\14\0"+
    "\1\14\10\0\1\14\1\0\3\14\1\222\1\14\1\0"+
    "\12\14\5\0\6\14\1\0\4\14\14\0\1\14\10\0"+
    "\1\14\1\0\5\14\1\0\3\14\1\223\6\14\5\0"+
    "\6\14\1\0\4\14\14\0\1\14\10\0\1\14\1\0"+
    "\5\14\1\0\2\14\1\224\7\14\5\0\6\14\1\0"+
    "\4\14\14\0\1\14\10\0\1\14\1\0\2\14\1\225"+
    "\2\14\1\0\12\14\5\0\6\14\1\0\4\14\14\0"+
    "\1\14\10\0\1\14\1\0\1\226\4\14\1\0\12\14"+
    "\5\0\6\14\1\0\4\14\14\0\1\14\10\0\1\14"+
    "\1\0\2\14\1\227\2\14\1\0\12\14\5\0\6\14"+
    "\1\0\4\14\14\0\1\14\10\0\1\14\1\0\5\14"+
    "\1\0\3\14\1\230\6\14\5\0\6\14\1\0\4\14"+
    "\14\0\1\14\10\0\1\14\1\0\5\14\1\0\12\14"+
    "\5\0\6\14\1\231\4\14\14\0\1\14\10\0\1\14"+
    "\1\0\5\14\1\0\12\14\5\0\6\14\1\0\2\14"+
    "\1\232\1\14\14\0\1\14\10\0\1\14\1\0\1\233"+
    "\4\14\1\0\12\14\5\0\6\14\1\0\4\14\14\0"+
    "\1\14\10\0\1\14\1\0\1\234\4\14\1\0\12\14"+
    "\5\0\6\14\1\0\4\14\14\0\1\14\14\0\1\235"+
    "\63\0\1\200\65\0\1\14\1\0\4\14\1\236\1\0"+
    "\12\14\5\0\6\14\1\0\4\14\14\0\1\14\10\0"+
    "\1\14\1\0\1\237\4\14\1\0\12\14\5\0\6\14"+
    "\1\0\4\14\14\0\1\14\10\0\1\14\1\0\1\14"+
    "\1\240\3\14\1\0\12\14\5\0\6\14\1\0\4\14"+
    "\14\0\1\14\10\0\1\14\1\0\2\14\1\241\2\14"+
    "\1\0\12\14\5\0\6\14\1\0\4\14\14\0\1\14"+
    "\10\0\1\14\1\0\5\14\1\0\12\14\5\0\6\14"+
    "\1\0\1\14\1\242\2\14\14\0\1\14\10\0\1\14"+
    "\1\0\5\14\1\0\12\14\5\0\1\243\5\14\1\0"+
    "\4\14\14\0\1\14\10\0\1\14\1\0\2\14\1\244"+
    "\2\14\1\0\12\14\5\0\6\14\1\0\4\14\14\0"+
    "\1\14\10\0\1\14\1\0\5\14\1\0\4\14\1\245"+
    "\5\14\5\0\6\14\1\0\4\14\14\0\1\14\10\0"+
    "\1\14\1\0\5\14\1\0\4\14\1\246\5\14\5\0"+
    "\6\14\1\0\4\14\14\0\1\14\10\0\1\14\1\0"+
    "\3\14\1\247\1\14\1\0\12\14\5\0\6\14\1\0"+
    "\4\14\14\0\1\14\10\0\1\14\1\0\5\14\1\0"+
    "\4\14\1\250\5\14\5\0\6\14\1\0\4\14\14\0"+
    "\1\14\43\0\1\251\33\0\1\14\1\0\5\14\1\0"+
    "\3\14\1\252\6\14\5\0\6\14\1\0\4\14\14\0"+
    "\1\14\15\0\1\253\61\0\1\14\1\254\5\14\1\0"+
    "\12\14\5\0\6\14\1\0\4\14\14\0\1\14\10\0"+
    "\1\14\1\0\4\14\1\255\1\0\12\14\5\0\6\14"+
    "\1\0\4\14\14\0\1\14\10\0\1\14\1\0\5\14"+
    "\1\0\1\14\1\256\10\14\5\0\6\14\1\0\4\14"+
    "\14\0\1\14\10\0\1\14\1\0\5\14\1\0\1\14"+
    "\1\257\10\14\5\0\6\14\1\0\4\14\14\0\1\14"+
    "\10\0\1\14\1\0\2\14\1\260\2\14\1\0\12\14"+
    "\5\0\6\14\1\0\4\14\14\0\1\14\10\0\1\14"+
    "\1\0\5\14\1\0\12\14\5\0\4\14\1\261\1\14"+
    "\1\0\4\14\14\0\1\14\10\0\1\14\1\0\5\14"+
    "\1\0\12\14\5\0\1\14\1\262\4\14\1\0\4\14"+
    "\14\0\1\14\41\0\1\263\35\0\1\14\1\0\1\14"+
    "\1\264\3\14\1\0\12\14\5\0\6\14\1\0\4\14"+
    "\14\0\1\14\12\0\1\265\63\0\10\266\1\0\56\266"+
    "\1\0\1\14\1\0\4\14\1\267\1\0\12\14\5\0"+
    "\6\14\1\0\4\14\14\0\1\14\10\0\1\14\1\0"+
    "\4\14\1\270\1\0\12\14\5\0\6\14\1\0\4\14"+
    "\14\0\1\14\10\0\1\14\1\0\1\271\4\14\1\0"+
    "\12\14\5\0\6\14\1\0\4\14\14\0\1\14\10\0"+
    "\1\14\1\0\1\14\1\272\3\14\1\0\12\14\5\0"+
    "\6\14\1\0\4\14\14\0\1\14\16\0\1\273\61\0"+
    "\1\274\65\0\1\14\1\0\1\275\4\14\1\0\12\14"+
    "\5\0\6\14\1\0\4\14\14\0\1\14\10\0\1\14"+
    "\1\0\1\276\4\14\1\0\12\14\5\0\6\14\1\0"+
    "\4\14\14\0\1\14\10\0\1\14\1\0\4\14\1\277"+
    "\1\0\12\14\5\0\6\14\1\0\4\14\14\0\1\14"+
    "\7\0\10\300\1\0\56\300\3\0\1\301\74\0\1\302"+
    "\61\0\1\303\74\0\1\304\61\0\1\305\67\0\1\306"+
    "\66\0\1\307\73\0\1\310\56\0\1\311\76\0\1\312"+
    "\62\0\1\300\73\0\1\313\56\0\1\314\77\0\1\315"+
    "\54\0\1\316\63\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8415];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\5\1\1\11\7\1\5\11"+
    "\1\1\4\11\1\1\1\11\5\1\1\11\2\1\2\0"+
    "\14\1\3\0\2\11\1\0\1\11\10\1\13\11\2\0"+
    "\16\1\2\0\10\1\3\0\17\1\1\11\10\1\2\0"+
    "\16\1\1\0\3\1\1\0\13\1\1\0\1\1\2\0"+
    "\6\1\1\11\1\1\2\0\4\1\2\0\3\1\16\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

private Symbol symbol (int type) {
        return new Symbol (type, yyline, yycolumn);
}

private Symbol symbol (int type, Object value) {
        return new Symbol (type, yyline, yycolumn, value);
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 55: 
          { return symbol(ClassSymbol.TYPESIMPLE, IdType.STRING);
          }
        case 66: break;
        case 15: 
          { return symbol(ClassSymbol.PARENTHESE_FERMANTE);
          }
        case 67: break;
        case 14: 
          { return symbol(ClassSymbol.PARENTHESE_OUVRANTE);
          }
        case 68: break;
        case 22: 
          { return symbol(ClassSymbol.POURCENT);
          }
        case 69: break;
        case 24: 
          { return symbol(ClassSymbol.CHEVRON_SUPERIEUR);
          }
        case 70: break;
        case 46: 
          { return symbol(ClassSymbol.STOP);
          }
        case 71: break;
        case 37: 
          { return symbol(ClassSymbol.MOD_ASSIGN);
          }
        case 72: break;
        case 13: 
          { return symbol(ClassSymbol.EGAL);
          }
        case 73: break;
        case 60: 
          { return symbol(ClassSymbol.TYPESIMPLE, IdType.BOOLEAN);
          }
        case 74: break;
        case 54: 
          { return symbol(ClassSymbol.REPEAT);
          }
        case 75: break;
        case 52: 
          { return symbol(ClassSymbol.WHILE);
          }
        case 76: break;
        case 51: 
          { return symbol(ClassSymbol.BREAK);
          }
        case 77: break;
        case 41: 
          { return symbol(ClassSymbol.OR_OP);
          }
        case 78: break;
        case 63: 
          { return symbol(ClassSymbol.STRUCTURE);
          }
        case 79: break;
        case 16: 
          { return symbol(ClassSymbol.CROCHET_OUVRANT);
          }
        case 80: break;
        case 65: 
          { return symbol(ClassSymbol.VIRGULE_FLOTTANTE);
          }
        case 81: break;
        case 6: 
          { return symbol(ClassSymbol.BARRE_OBLIQUE);
          }
        case 82: break;
        case 28: 
          { return symbol(ClassSymbol.DIV_ASSIGN);
          }
        case 83: break;
        case 34: 
          { return symbol(ClassSymbol.DEC_OP);
          }
        case 84: break;
        case 29: 
          { return symbol(ClassSymbol.MUL_ASSIGN);
          }
        case 85: break;
        case 27: 
          { return symbol(ClassSymbol.IF);
          }
        case 86: break;
        case 10: 
          { return symbol(ClassSymbol.ACCOLADE_FERMANTE);
          }
        case 87: break;
        case 43: 
          { return symbol(ClassSymbol.NULL);
          }
        case 88: break;
        case 9: 
          { return symbol(ClassSymbol.ACCOLADE_OUVRANTE);
          }
        case 89: break;
        case 1: 
          { System.out.println("error : token inconnu : "+ yytext() +". line:"+yyline+", column:"+yycolumn);
          }
        case 90: break;
        case 59: 
          { return symbol(ClassSymbol.LISTOF);
          }
        case 91: break;
        case 53: 
          { return symbol(ClassSymbol.RETURN);
          }
        case 92: break;
        case 39: 
          { return symbol(ClassSymbol.GE_OP);
          }
        case 93: break;
        case 26: 
          { return symbol(ClassSymbol.IN);
          }
        case 94: break;
        case 32: 
          { return symbol(ClassSymbol.NE_OP);
          }
        case 95: break;
        case 20: 
          { return symbol(ClassSymbol.CADRATIN);
          }
        case 96: break;
        case 38: 
          { return symbol(ClassSymbol.LE_OP);
          }
        case 97: break;
        case 11: 
          { return symbol(ClassSymbol.VIRGULE);
          }
        case 98: break;
        case 25: 
          { return symbol(ClassSymbol.CIRCONFLEXE);
          }
        case 99: break;
        case 33: 
          { return symbol(ClassSymbol.SUB_ASSIGN);
          }
        case 100: break;
        case 49: 
          { return symbol(ClassSymbol.FALSE);
          }
        case 101: break;
        case 19: 
          { return symbol(ClassSymbol.TILDE);
          }
        case 102: break;
        case 18: 
          { return symbol(ClassSymbol.EXCLAMATION);
          }
        case 103: break;
        case 58: 
          { return symbol(ClassSymbol.FOREACH);
          }
        case 104: break;
        case 3: 
          { System.out.println("identificateur : "+yytext()); return symbol(ClassSymbol.IDENTIFICATEUR, yytext());
          }
        case 105: break;
        case 17: 
          { return symbol(ClassSymbol.CROCHET_FERMANT);
          }
        case 106: break;
        case 62: 
          { return symbol(ClassSymbol.PROCEDURE);
          }
        case 107: break;
        case 57: 
          { return symbol(ClassSymbol.TYPESIMPLE , IdType.INTEGER);
          }
        case 108: break;
        case 48: 
          { return symbol(ClassSymbol.CLASS);
          }
        case 109: break;
        case 56: 
          { return symbol(ClassSymbol.STATIC);
          }
        case 110: break;
        case 2: 
          { return symbol(ClassSymbol.ENTIER, Integer.parseInt(yytext()));
          }
        case 111: break;
        case 30: 
          { return symbol(ClassSymbol.STRING_LITERAL, yytext());
          }
        case 112: break;
        case 61: 
          { return symbol(ClassSymbol.FUNCTION);
          }
        case 113: break;
        case 31: 
          { return symbol(ClassSymbol.EQ_OP);
          }
        case 114: break;
        case 50: 
          { return symbol(ClassSymbol.TYPESIMPLE, IdType.FLOAT);
          }
        case 115: break;
        case 40: 
          { return symbol(ClassSymbol.AND_OP);
          }
        case 116: break;
        case 64: 
          { return symbol(ClassSymbol.TYPESIMPLE, IdType.CHARACTER);
          }
        case 117: break;
        case 7: 
          { return symbol(ClassSymbol.ETOILE);
          }
        case 118: break;
        case 21: 
          { return symbol(ClassSymbol.PLUS);
          }
        case 119: break;
        case 36: 
          { return symbol(ClassSymbol.INC_OP);
          }
        case 120: break;
        case 5: 
          { return symbol(ClassSymbol.POINT);
          }
        case 121: break;
        case 35: 
          { return symbol(ClassSymbol.ADD_ASSIGN);
          }
        case 122: break;
        case 44: 
          { return symbol(ClassSymbol.TRUE);
          }
        case 123: break;
        case 45: 
          { return symbol(ClassSymbol.TYPE);
          }
        case 124: break;
        case 47: 
          { return symbol(ClassSymbol.CARACTERE, yytext());
          }
        case 125: break;
        case 12: 
          { return symbol(ClassSymbol.DEUX_POINT);
          }
        case 126: break;
        case 42: 
          { return symbol(ClassSymbol.ELSE);
          }
        case 127: break;
        case 4: 
          { 
          }
        case 128: break;
        case 8: 
          { return symbol(ClassSymbol.POINT_VIRGULE);
          }
        case 129: break;
        case 23: 
          { return symbol(ClassSymbol.CHEVRON_INFERIEUR);
          }
        case 130: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(ClassSymbol.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
